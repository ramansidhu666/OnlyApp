@model CommunicationApp.Models.CompanyModel

@{
    ViewBag.Title = "Company";
    Layout = "~/Views/Shared/_LayoutBackEnd.cshtml";
}

<script type="text/javascript">
    $(document).ready(function () {

        ////Load Countries
        LoadStates('CountryID', 'StateID', '@ViewBag.StateID');

        //Load States for Per
        LoadCities('StateID', 'CityID', '@ViewBag.CityID', '@ViewBag.StateID');

        function LoadStates(Country, State, StateDefaultVal) {
            $("#" + State + "").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetStates")',
                dataType: 'json',
                data: { id: $("#" + Country + "").val() },
                success: function (states) {
                    $.each(states, function (i, state) {
                        $("#" + State + "").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                        $("#" + State + "").val(StateDefaultVal);
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        }
        function LoadCities(State, City, CityDefaultVal, StateDefaultVal) {
            var StateID="-1";
            if($("#" + State + "").val()!=null)
            {
                StateID=$("#" + State + "").val();
            }
            else
            {
                StateID=StateDefaultVal;
            }
            $("#" + City + "").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetCity")',
                dataType: 'json',
                data: { id: StateID },
                success: function (cities) {
                    $.each(cities, function (i, CityObj) {
                        $("#" + City + "").append('<option value="' + CityObj.Value + '">' + CityObj.Text + '</option>');
                        $("#" + City + "").val(CityDefaultVal);
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Cities.' + ex);
                }
            });
            return false;
        }

        //For State
        $("#CountryID").change(function () {
            LoadStates('CountryID', 'StateID','-1');
            LoadCities('StateID', 'CityID','-1','-1');   //For setting Cities Select box on Country Change
        });

        //For City
        $("#StateID").change(function () {
            LoadCities('StateID', 'CityID','-1','-1');
        });


        $('#btnSubmit').click(function () {
            if ($('#fileToUpload').val() == "") {
                if ($('#LogoPath').val() == "") {
                    $("#spanfile").html("Please upload file");
                    return false;
                }
            }
            else {
                return checkfile();
            }
        });

        //get file path from client system
        function getNameFromPath(strFilepath) {

            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            }
            else {
                return strName[0];
            }

        }
        //get file size
        function GetFileSize(fileid) {
            try {
                var fileSize = 0;
                // Detecting IE
                var isIE = false;
                if ($('html').is('.ie ie7, .ie ie8, .ie ie9, .ie ie10')) {
                    isIE = true;
                    //alert("IE");
                }

                if (isIE) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + fileid)[0].files[0].size //size in kb
                    fileSize = fileSize / 1048576; //size in mb
                }

                // alert("Uploaded File Size is" + fileSize + "MB");
                return fileSize;
            }
            catch (e) {
                alert("Error is :" + e);
            }
        }
        function checkfile() {
            var file = getNameFromPath($("#fileToUpload").val());
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                //alert(extension);
                switch (extension) {
                    case 'jpg':
                    case 'png':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }
            if (flag == false) {
                $("#spanfile").html("You can upload only jpg, png extension file");
                return false;

            }
            else {
                var size = GetFileSize('fileToUpload');
                if (size > 3) {
                    $("#spanfile").html("You can upload file up to 3 MB");
                    return false;
                }
                else {
                    $("#spanfile").html("");
                }
            }
        }
        $(function () {
            $("#fileToUpload").change(function () {
                checkfile();
            });

        });

    });
</script>



@{Html.RenderAction("DisplayMessage", "Base", new { ShowMessage = TempData["ShowMessage"], MessageBody = TempData["MessageBody"] });}
@using (Html.BeginForm("Edit", "Company", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.CompanyID)
    @*@Html.HiddenFor(model => model.UserId)*@
    <div class="row">
        <div class="col-md-12">
            <div class="sky-form boxed margin-top10">
                <header>Company</header>
                @Html.ValidationSummary(true)
                <fieldset>
                    <div class="row">
                        <section class="col col-md-6">
                            @Html.LabelForRequired(model => model.LogoPath)
                            @Html.HiddenFor(model => model.LogoPath)
                            <label class="input input-file" for="fileToUpload">
                                @if (@Model.LogoPath != "")
                                {
                                    <a href="@Url.Action("Edit", new { id = Model.CompanyID })">
                                        <img src="@Url.Content(@Model.LogoPath)" height="50" width="200" alt="logo" />
                                    </a>
                                }
                                <div class="button"><input type="file" name="file" onchange="this.parentNode.nextSibling.value = this.value" value="@Model.LogoPath" id="fileToUpload">Browse</div>@if (@Model.LogoPath == "")
                                {<input type="text" readonly="">}

                                <span style="color:red;"></span><span class="field-validation-error" id="spanfile"></span>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-md-6">
                            @Html.LabelForRequired(model => model.CompanyName)
                            <label class="input">
                                @Html.TextBoxFor(model => model.CompanyName)
                                @*@Html.TextAreaFor(model => model.CompanyName)*@
                                @*@Html.DropDownList("CompanyID", "<--Select Company-->")*@
                                @Html.ValidationMessageFor(model => model.CompanyName)
                            </label>
                        </section>
                    </div>
                    <div class="row">

                        <section class="col col-md-6">
                            @*@Html.LabelFor(model => model.EmployeeAddress, new { @class = "label" })*@
                            @Html.LabelForRequired(model => model.CompanyAddress)
                            <label class="textarea">
                                @Html.TextAreaFor(model => model.CompanyAddress)
                                @Html.ValidationMessageFor(model => model.CompanyAddress)
                            </label>
                        </section>
                    </div>

                    <div class="row">
                        <section class="col col-md-2">

                            @Html.LabelForRequired(model => model.CountryID)
                            <label class="select">
                                @Html.DropDownList("CountryID", (SelectList)ViewBag.Countrylist, new { @required = "" })
                                @Html.ValidationMessageFor(model => model.CountryID)
                            </label>
                        </section>
                        <section class="col col-md-2">
                            @*@Html.LabelFor(model => model.StateID, new { @class = "label" })*@
                            @Html.LabelForRequired(model => model.StateID)
                            <label class="select">
                              
                                @Html.DropDownList("CountryID", (SelectList)ViewBag.Statelist, new { @required = "" })
                                @Html.ValidationMessageFor(model => model.StateID)
                            </label>
                        </section>
                        <section class="col col-md-2">
                            @*@Html.LabelFor(model => model.CityID, new { @class = "label" })*@
                            @Html.LabelForRequired(model => model.CityID)
                            <label class="select">
                               
                                @Html.DropDownList("CountryID", (SelectList)ViewBag.Citylist, new { @required = "" })
                                @Html.ValidationMessageFor(model => model.CityID)
                            </label>
                        </section>
                    </div>

                    <div class="row">
                        <section class="col col-md-2">
                            @Html.LabelForRequired(model => model.WebSite)
                            <label class="input">
                                @Html.EditorFor(model => model.WebSite)
                                @Html.ValidationMessageFor(model => model.WebSite)
                            </label>
                        </section>
                        <section class="col col-md-4">

                            @Html.LabelForRequired(model => model.EmailID)
                            <label class="input">
                                @Html.EditorFor(model => model.EmailID)
                                @Html.ValidationMessageFor(model => model.EmailID)
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-md-2">

                            @Html.LabelForRequired(model => model.PhoneNo)
                            <label class="input">
                                @Html.EditorFor(model => model.PhoneNo)
                                @Html.ValidationMessageFor(model => model.PhoneNo)
                            </label>
                        </section>
                        <section class="col col-md-3">
                            @*@Html.LabelFor(model => model.IsActive, new { @class = "label" })*@
                            @Html.LabelForRequired(model => model.IsActive)
                            <label class="check-square padding-top30">
                                @Html.CheckBoxFor(model => model.IsActive)
                                @Html.ValidationMessageFor(model => model.IsActive)
                            </label>
                        </section>
                    </div>
                    <div class="row">
                    </div>
                </fieldset>
                <footer>
                    <input type="submit" value="Update" class="bigButton" id="btnSubmit" />
                </footer>
            </div>
        </div>
    </div>
}

@if (Convert.ToBoolean(TempData["View"]) == true)
{
    <p class="operation">
        <i class="fa fa-mail-reply create_icon"></i>
        @Html.ActionLink(" Back to List", "Index")
    </p>
}





@*@model CommunicationApp.Entity.Company

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Company</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.CompanyID)

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyName)
                @Html.ValidationMessageFor(model => model.CompanyName)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyAddress)
                @Html.ValidationMessageFor(model => model.CompanyAddress)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountryID, "CountryID", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CountryID", String.Empty)
                @Html.ValidationMessageFor(model => model.CountryID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateID, "StateID", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StateID", String.Empty)
                @Html.ValidationMessageFor(model => model.StateID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityID, "CityID", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityID", String.Empty)
                @Html.ValidationMessageFor(model => model.CityID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailID, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailID)
                @Html.ValidationMessageFor(model => model.EmailID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WebSite, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WebSite)
                @Html.ValidationMessageFor(model => model.WebSite)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhoneNo, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhoneNo)
                @Html.ValidationMessageFor(model => model.PhoneNo)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedOn, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedOn)
                @Html.ValidationMessageFor(model => model.CreatedOn)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastUpdatedOn, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastUpdatedOn)
                @Html.ValidationMessageFor(model => model.LastUpdatedOn)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogoPath, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LogoPath)
                @Html.ValidationMessageFor(model => model.LogoPath)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
